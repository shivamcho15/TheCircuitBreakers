{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT7, 1.5, False)\nright_drive_smart = Motor(Ports.PORT12, 1.5, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 200, 195.07199999999997, 127, MM, 1)\ncontroller = Controller()\nBoxLift = Motor(Ports.PORT2, False)\nbumper_6 = Bumper(Ports.PORT6)\nFlywheel_motor_a = Motor(Ports.PORT11, True)\nFlywheel_motor_b = Motor(Ports.PORT8, False)\nFlywheel = MotorGroup(Flywheel_motor_a, Flywheel_motor_b)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_left_shoulder_control_motors_stopped = True\ncontroller_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, controller_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA + axisC\n            # right = axisA - axisC\n            drivetrain_left_side_speed = controller.axisA.position() + controller.axisC.position()\n            drivetrain_right_side_speed = controller.axisA.position() - controller.axisC.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonLUp/buttonLDown status\n            # to control BoxLift\n            if controller.buttonLUp.pressing():\n                BoxLift.spin(FORWARD)\n                controller_left_shoulder_control_motors_stopped = False\n            elif controller.buttonLDown.pressing():\n                BoxLift.spin(REVERSE)\n                controller_left_shoulder_control_motors_stopped = False\n            elif not controller_left_shoulder_control_motors_stopped:\n                BoxLift.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_left_shoulder_control_motors_stopped = True\n            # check the buttonRUp/buttonRDown status\n            # to control Flywheel\n            if controller.buttonRUp.pressing():\n                Flywheel.spin(FORWARD)\n                controller_right_shoulder_control_motors_stopped = False\n            elif controller.buttonRDown.pressing():\n                Flywheel.spin(REVERSE)\n                controller_right_shoulder_control_motors_stopped = False\n            elif not controller_right_shoulder_control_motors_stopped:\n                Flywheel.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\n\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nintake_spinning = False\ndispense_state=None\n\ndef turn_accurate(deg,direc):\n    brain_inertial.set_heading(0, DEGREES)\n    while brain_inertial.heading()<deg:\n        drivetrain.turn(direc)\n        brain.screen.print(brain_inertial.heading())\n\ndef collect_reds_old():\n    brain.screen.print(\"GOING TO GET REDS\")\n    drivetrain.set_drive_velocity(100, PERCENT)\n    #Get First Red\n    drivetrain.drive_for(FORWARD, 12, INCHES)\n    drivetrain.turn_for(LEFT, 64.5, DEGREES)\n    drivetrain.drive_for(FORWARD,3,INCHES)\n    drivetrain.set_timeout(1,SECONDS)\n    drivetrain.drive_for(REVERSE,3,INCHES)\n    drivetrain.turn_for(RIGHT, 64.5, DEGREES)\n    \n    drivetrain.set_timeout(1, SECONDS)\n    drivetrain.drive_for(FORWARD, 52, INCHES)\n    drivetrain.stop()\n    wait(1, SECONDS)\n    drivetrain.drive_for(REVERSE, 4, INCHES)\n    drivetrain.turn_for(LEFT, 45, DEGREES)\n    drivetrain.drive_for(FORWARD, 24, INCHES)\ndef dist_print(doing):\n     brain.screen.set_cursor(1, 1)\n\n       \n    #  brain.screen.print(distance_9.object_distance(INCHES)) \n     brain.screen.set_cursor(2,1)\n     brain.screen.print(doing) \n\n     wait(0.1,SECONDS)\n     brain.screen.clear_screen()\n\ndef collect_reds_better():\n    # brain.screen.print(\"GOING TO GET REDS BETTER\")\n \n    \n    # while distance_9.object_distance(INCHES)>5:\n    #     drivetrain.drive(FORWARD)\n    #     #drivetrain.turn_for(LEFT,1,DEGREES)\n    #     dist_print(\"SECOND RED\")\n     \n    # drivetrain.drive_for(REVERSE,2,INCHES)\n    # drivetrain.stop()\n    # drivetrain.set_turn_velocity(20,PERCENT)\n\n    # wait(2,SECONDS)\n\n    # while distance_9.object_distance(INCHES)>16:\n    #     drivetrain.turn(RIGHT)\n    #     dist_print(\"THIRD RED\")\n        \n    # drivetrain.stop()    \n    # drivetrain.turn_for(LEFT,10,DEGREES)\n    # drivetrain.set_turn_velocity(100,PERCENT)\n\n    # while distance_9.object_distance(INCHES)>3.3:\n    #     drivetrain.drive(FORWARD)\n    #     dist_print(\"THIRD RED\")\n    return\n       \n\n\n    while True:\n        dist_print(\"DONE\")\ndef PID_MOVE(dist):\n\n    T = 10\n\n    # while True:\n    #     error = distance_9.object_distance(INCHES)-dist\n    #     if error<=0:\n    #         break\n    #     drivetrain.set_drive_velocity(error*T)\n    #     drivetrain.drive(FORWARD)\n    #     dist_print(\"TESTING\")\ndef final_movement():\n    # start_dist = distance_9.object_distance(INCHES)\n    # while distance_9.object_distance(INCHES)>3:\n    #     dist_print(\"Going purple\")\n    #     drivetrain.drive(FORWARD)\n    # distance_travelled = start_dist-distance_9.object_distance(INCHES)\n    # drivetrain.drive_for(FORWARD,10,INCHES)\n    drivetrain.set_drive_velocity(50,PERCENT)\n    drivetrain.set_turn_velocity(50,PERCENT)\n\n    drivetrain.drive_for(FORWARD,40,INCHES)\n    drivetrain.turn_for(RIGHT,40,DEGREES)\n    drivetrain.drive_for(FORWARD,13,INCHES)\n    drivetrain.drive_for(REVERSE,13,INCHES)\n    drivetrain.turn_for(RIGHT,30,DEGREES)\n    drivetrain.drive_for(FORWARD,55,INCHES)\n    drivetrain.turn_for(LEFT,70,DEGREES)\n    while True:\n        drivetrain.drive(FORWARD)\ndef move_flywheel():\n    while True:\n        Flywheel.spin(REVERSE)\ndef total_auton():\n    Thread(final_movement)\n    Thread(move_flywheel)\ndef intaking():\n\n    start_time = brain.timer.time(SECONDS)\n    if intake_spinning==True:\n        intake_spinning=False\n        return\n    intake_spinning=True\n    while intake_spinning:\n        Flywheel.spin(FORWARD)\n        if (controller.buttonEUp.pressing()) and (brain.timer.time(SECONDS)-start_time)>0.5:\n            intake_spinning=False\n            break\ndef box_lift():\n    if dispense_state==None:\n        BoxLift.spin_for(FORWARD,90,DEGREES)\n    elif dispense_state==\"purple\":\n        return\n    else:\n        return\n    \ndef when_started1():\n\n    drivetrain.stop()\n    global myVariable, vexcode_brain_precision, vexcode_console_precision\n\n    Flywheel.set_velocity(100,PERCENT)\n    Flywheel.set_max_torque(100,PERCENT)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    BoxLift.set_velocity(75,PERCENT)\n\n    \n\n    # # while True:\n    # #     brain.screen.set_cursor(1, 1)\n\n       \n    # #     brain.screen.print(distance_2.object_distance(INCHES))\n    # #     wait(0.1,SECONDS) \n    # #     brain.screen.clear_screen()\n\n\n    bumper_6.released(total_auton)\n    controller.buttonEUp.pressed(intaking)\n    controller.buttonFDown.pressed(box_lift)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[7,12,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"24:16","direction":"fwd","gyroType":"none","width":"7.68","unit":"in","wheelbase":"5","wheelbaseUnit":"in","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"BoxLift","leftDir":"false","right":"Flywheel","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[2],"name":"BoxLift","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"bumper_6","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[11,8],"name":"Flywheel","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}